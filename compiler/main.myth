import 
    os
    cli
    sys
    "lexer"
    "token"
    "parser"
;

/* 
 By default accessing an index of an uknown/dyn sized list will return result
 This changes it to access it with no safeguards.
 Program panics if index doesn't exist
*/
$unchecked_list_access

enum BmcErr
| List(ListErr)
| Input(cli::ParseErr)
| File(os::FileErr)
| Tree(parser::tree::TreeErr)
| Ast(parser::ast::AstErr)
;

@[if(target_build = 'armv8_mac')]
const DEFAULT_TARGET = Target.Armv8(Platform.Mac)
@[if(target_build = 'riscv_bard')]
const DEFAULT_TARGET = Target.Riscv(Platform.Bard)
@[if(target_build = 'riscv_linux')]
const DEFAULT_TARGET = Target.Riscv(Platform.Linux)
@[if(target_build = 'x86_windows')]
const DEFAULT_TARGET = Target.X86(Platform.Windows)
@[if(target_build = 'x86_linux')]
const DEFAULT_TARGET = Target.X86(Platform.Linux)

enum Target
| Token
| ParseTree
| Ast
| Ir
| Risv(Platform)
| X86(Platform)
| Armv8(Platform)
;

enum Platform
| Bard
| Linux
| Mac
| Metal
| Windows
;

enum Optimize
| Memory
| Speed
| Normal
;

class Input(derive(cli::Parser))
    struct {
        @[cli(short = 'o', validator = parse_path)]
        output: ?os::Path

        @[cli(short = 't', validator = parse_target)]
        target: Target = DEFAULT_TARGET

        @[cli(short = 'p', validator = parse_performance)]
        performance: Optimize = Optimize.Normal

        @[cli(validator = load_source)]
        source: [string]
    }

    fn parse_performance: Optimize!(optimize: string)
        match optimize
        | 'memory' => Ok(Optimize.Memory)
        | 'speed' => Ok(Optimize.Speed)
        | 'Normal' => Ok(Optimize.Normal)
        | _ => throw
        ;
    ;

    fn parse_target: Target!(target: string)
        Ok(
            match target
            | 'armv8_linux' => Target.Armv8(Platform.Linux)
            | 'armv8_metal' => Target.Armv8(Platform.Metal)
            | 'riscv_bard' => Target.Riscv(Platform.Bard)
            | 'riscv_linux' => Target.Riscv(Platform.Linux)
            | 'riscv_metal' => Target.Riscv(Platform.Metal)
            | 'x86_linux' => Target.X86(Platform.Linux)
            | 'x86_windows' => Target.X86(Platform.Windows)
            | 'x86_metal' => Target.X86(Platform.Metal)
            | _ => throw
            ;
        )
    ;

    fn parse_path: os::Path!(target: string)
        Ok(os::Path.from(target)
            .try()
        )
    ;

    fn load_source: [string]!(input: string)
        Ok(os::read_file(input)
            .try()
            .char()
        )
    ;
;

fn main: !BmcErr()
    let setting = sys::argv
    let param = Input.parse(setting)
        .catch(fn(e)BmcErr.Input(e))

    let token = lexer::scan(param.source)

    if (let Some(Target.Token) == config.target)
        token.pretty_print()
        return Ok()
    ;

    // Parse tree converts a list of tokens/words in Mythic
    // into a tree of theoretically correct sentences.
    let tree = parser::tree::parse_main(token.token)
        .catch(fn(e)BmcErr.Tree(e))

    if (let Some(Target.ParseTree) == config.target)
        tree.pretty_print()
        return Ok()
    ;


    // The ast verifies the validity of sentences
    let ast = parser::ast::parse(tree)
        .catch(fn(e)BmcErr.Ast(e))
    if param.target == Some("ast")
        ast.pretty_print()
        return Ok()
    ;

    let ir = ir::translate(ast)
    if param.target == Some("ir")
        ir.pretty_print()
        return Ok()
    ;
;
